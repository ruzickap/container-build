name: Container build

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Push the image to Container Registry"
        type: boolean
        required: true
        default: false
      container_image_vulnerability_checks:
        description: "Scan image for vulnerability issues"
        type: boolean
        required: true
        default: true
      container_image_expires_after:
        description: "Expires after (days) [or 'Never']"
        type: string
        required: false
        default: "30"

  push:
    tags:
      # For code tagging you can use 'v' prefix, but 'v' prefix should not be part of container tag
      - "v[0-9]+.[0-9]+.[0-9]+*"
  schedule:
    - cron: "0 0 * * 1"

env:
  DOCKERFILE_LOCATION: src/app/Dockerfile
  # DOCKERFILE_LOCATION: src/app/Dockerfile-node-18-alpine
  # DOCKERFILE_LOCATION: src/app/Dockerfile-node-18-debian-slim
  # DOCKERFILE_LOCATION: src/app/Dockerfile-ubi-nodejs-18-minimal
  # Container image destination - with registry and without tags
  CONTAINER_IMAGE: quay.io/petr_ruzicka/myc-hello-kubernetes
  CONTAINER_REGISTRY_USER: ${{ secrets.CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  CONTAINER_IMAGE_PRODUCT_ID: 12345
  CONTAINER_IMAGE_LICENSES: Apache-2.0
  CONTAINER_IMAGE_VENDOR: MyCompany
  CONTAINER_IMAGE_AUTHORS: petr.ruzicka@gmail.com
  CONTAINER_IMAGE_REPOSITORY_URL: https://quay.io/repository/petr_ruzicka/myc-hello-kubernetes?tab=tags
  CONTAINER_IMAGE_EXPIRES_AFTER: 365 # days
  # renovate: datasource=github-tags depName=goodwithtech/dockle
  DOCKLE_VERSION: 0.4.9
  # Prisma cloud credentials
  PCC_CONSOLE_URL: ${{ secrets.PCC_CONSOLE_URL }}
  PCC_PASS: ${{ secrets.PCC_PASS }}
  PCC_USER: ${{ secrets.PCC_USER }}
  # Snyk credentials
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  # Wiz credentials
  WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
  WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

jobs:
  container-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: hadolint/hadolint-action@v3.0.0
        id: hadolint
        with:
          dockerfile: ${{ env.DOCKERFILE_LOCATION }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Set GitHub variables
        id: variables
        env:
          DOCKERFILE_LOCATION: ${{ env.DOCKERFILE_LOCATION }}
          CONTAINER_IMAGE: ${{ env.CONTAINER_IMAGE }}
        run: |
          set -euxo pipefail
          echo "${CONTAINER_IMAGE}" | awk -F / '{print "CONTAINER_REGISTRY="$1}' | tee -a "${GITHUB_OUTPUT}"
          echo "CONTAINER_NAME=$(basename "${CONTAINER_IMAGE}")" | tee -a "${GITHUB_OUTPUT}"
          echo "DOCKER_BUILD_DIRECTORY=$(dirname "${DOCKERFILE_LOCATION}")" | tee -a "${GITHUB_OUTPUT}"
          BASE_IMAGE=$(awk '/^FROM/ {a=$2} END{print a}' "${DOCKERFILE_LOCATION}")
          docker pull --quiet "${BASE_IMAGE}"
          # Add 'docker.io' to base container images which are missing it
          echo "${BASE_IMAGE}" | grep -E '[^.]+\..+:' || BASE_IMAGE="docker.io/${BASE_IMAGE}"
          echo "BASE_IMAGE=${BASE_IMAGE}" | tee -a "${GITHUB_OUTPUT}"
          BASE_CONTAINER_IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${BASE_IMAGE}" | cut -d @ -f 2)
          echo "BASE_CONTAINER_IMAGE_DIGEST=${BASE_CONTAINER_IMAGE_DIGEST}" | tee -a "${GITHUB_OUTPUT}"

          # Set variables for com.mycompany.image.expires.after and com.mycompany.image.expires
          if [[ ${{ inputs.container_image_expires_after || env.CONTAINER_IMAGE_EXPIRES_AFTER }} = 'Never' ]]; then
            echo "IMAGE_EXPIRES=Never" | tee -a "${GITHUB_OUTPUT}"
            echo "IMAGE_EXPIRES_AFTER=Never" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "IMAGE_EXPIRES=$(date -u --date='+${{ inputs.container_image_expires_after || env.CONTAINER_IMAGE_EXPIRES_AFTER }} days' +'%FT%TZ')" | tee -a "${GITHUB_OUTPUT}"
            echo "IMAGE_EXPIRES_AFTER=${{ inputs.container_image_expires_after || env.CONTAINER_IMAGE_EXPIRES_AFTER }}d" | tee -a "${GITHUB_OUTPUT}"
          fi

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.CONTAINER_IMAGE }}
            ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_NAME }}
          tags: |
            # Whever the pipeline runs form "main" - use "latest" container tag
            type=raw,value=latest,enable={{ is_default_branch }}
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=semver,pattern={{major}},event=tag,enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            # When the pipeline is not excuted form 'main' branch use "pr-<mybranch>" tag
            type=ref,prefix=br-,event=branch,enable=${{ github.ref_name != github.event.repository.default_branch }}
          labels: |
            # org.opencontainers.image.created - it is there by default
            org.opencontainers.image.authors=${{ env.CONTAINER_IMAGE_AUTHORS }}
            # org.opencontainers.image.description - it is there by default (repository description)
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.version - it is there by default
            org.opencontainers.image.vendor=${{ env.CONTAINER_IMAGE_VENDOR }}
            org.opencontainers.image.licenses=${{ env.CONTAINER_IMAGE_LICENSES }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.base.digest=${{ steps.variables.outputs.BASE_CONTAINER_IMAGE_DIGEST }}
            org.opencontainers.image.base.name=${{ steps.variables.outputs.BASE_IMAGE }}
            com.mycompany.image.pipeline.url=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
            com.mycompany.image.pipeline.source=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/workflow
            com.mycompany.image.product_id=${{ env.CONTAINER_IMAGE_PRODUCT_ID }}
            com.mycompany.image.repository.url=${{ env.CONTAINER_IMAGE_REPOSITORY_URL }}
            com.mycompany.image.used_for=all
            com.mycompany.image.expires=${{ steps.variables.outputs.IMAGE_EXPIRES }}
            com.mycompany.image.expires.after=${{ steps.variables.outputs.IMAGE_EXPIRES_AFTER }}
            quay.expires-after=${{ steps.variables.outputs.IMAGE_EXPIRES_AFTER }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker build
        uses: docker/build-push-action@v3
        id: build-push-action
        with:
          file: ${{ env.DOCKERFILE_LOCATION }}
          context: ${{ steps.variables.outputs.DOCKER_BUILD_DIRECTORY }}
          load: true
          tags: ${{ steps.docker_meta.outputs.tags }}

      #########################
      # Trivy Scanner
      #########################

      - name: Trivy - scan container image
        uses: aquasecurity/trivy-action@master
        if: always() && steps.build-push-action.outcome == 'success'
        continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
        with:
          image-ref: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL

      #########################
      # Anchore - Grype
      #########################

      - name: Grype - scan container image
        uses: anchore/scan-action@v3
        # Continue whenever container was built (no matter if previous scanner failed)
        if: always() && steps.build-push-action.outcome == 'success'
        continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
        with:
          image: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          severity-cutoff: critical
          output-format: table

      #########################
      # Snyk Scanner
      #########################

      - name: Snyk - scan container image
        uses: snyk/actions/docker@master
        if: always() && steps.build-push-action.outcome == 'success'
        continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          image: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}
          args: --file=${{ env.DOCKERFILE_LOCATION }} --severity-threshold=high

      - name: Snyk - upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always() && steps.build-push-action.outcome == 'success'
        with:
          sarif_file: snyk.sarif

      #########################
      # Prisma Cloud Scanner
      #########################

      # - name: Prisma Cloud - scan container image
      #   if: always() && steps.build-push-action.outcome == 'success'
      #   id: prisma-cloud-scan
      #   uses: PaloAltoNetworks/prisma-cloud-scan@v1
      #   continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
      #   with:
      #     pcc_console_url: ${{ env.PCC_CONSOLE_URL }}
      #     pcc_user: ${{ env.PCC_USER }}
      #     pcc_pass: ${{ env.PCC_PASS }}
      #     image_name: ${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}

      # - name: Prisma Cloud - upload SARIF file
      #   if: always() && steps.build-push-action.outcome == 'success'
      #   uses: github/codeql-action/upload-sarif@v1
      #   continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
      #   with:
      #     sarif_file: ${{ steps.prisma-cloud-scan.outputs.sarif_file }}

      #########################
      # Wiz Scanner
      #########################

      - name: Wiz - scan container image
        if: always() && steps.build-push-action.outcome == 'success'
        continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
        env:
          WIZ_CLIENT_ID: ${{ env.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ env.WIZ_CLIENT_SECRET }}
        run: |
          set -euxo pipefail
          curl -s -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli
          ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
          ./wizcli docker scan --image "${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}" --tag product_id="${{ env.CONTAINER_IMAGE_PRODUCT_ID }}"

      #########################
      # Dockle
      #########################

      - name: Dockle - scan container image
        if: always() && steps.build-push-action.outcome == 'success'
        continue-on-error: ${{ ! inputs.container_image_vulnerability_checks || false }}
        run: |
          set -euxo pipefail
          curl -sL -o dockle.deb https://github.com/goodwithtech/dockle/releases/download/v${{ env.DOCKLE_VERSION }}/dockle_${{ env.DOCKLE_VERSION }}_Linux-64bit.deb
          sudo dpkg -i ./dockle.deb
          dockle --exit-code 1 "${{ env.CONTAINER_IMAGE }}:${{ steps.docker_meta.outputs.version }}"

      #########################
      # SBOM
      #########################

      ###############################################
      # Push container image to registry and sign it
      ###############################################

      - name: Login to ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
          username: ${{ env.CONTAINER_REGISTRY_USER }}
          password: ${{ env.CONTAINER_REGISTRY_PASSWORD }}

      - name: Login to ghcr.io
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to container registry
        if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
        uses: docker/build-push-action@v3
        id: docker_push
        with:
          file: ${{ env.DOCKERFILE_LOCATION }}
          context: ${{ steps.variables.outputs.DOCKER_BUILD_DIRECTORY }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      # - name: Install Cosign
      #   if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
      #   uses: sigstore/cosign-installer@v2

      # - name: Sign image with a key
      #   if: inputs.container_registry_push || startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
      #   run: |
      #     echo "${{ steps.docker_meta.outputs.tags }}" | xargs --verbose -I {} cosign sign --key env://COSIGN_PRIVATE_KEY {}@${{ steps.docker_push.outputs.digest }}
      #   env:
      #     TAGS: ${{ steps.docker_meta.outputs.tags }}
      #     COSIGN_EXPERIMENTAL: true

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          gh release create ${{ github.ref_name }} --generate-notes
