name: container-build

on:
  workflow_dispatch:
    inputs:
      container_registry_push:
        description: "Push the image to Container Registry"
        type: boolean
        required: false
        default: false
      container_image_skip_vulnerability_checks:
        description: "Skip image (vulnerability) scanner"
        type: boolean
        required: false
        default: false
      container_image_expires_after:
        description: "Expires after (days) [or 'Never']"
        type: string
        required: false
        default: "30"
  push:
    tags:
      # For code tagging you can use 'v' prefix, but 'v' prefix should not be part of container tag
      - "v[0-9]+.[0-9]+.[0-9]+*"
  schedule:
    - cron: "0 0 * * 1"

env:
  container_image_dockerfile_locations: |
    include:
      # Contains several vulnerabilities
      - container_image_dockerfile_location: src/app/Dockerfile
        # This is the "default Dockerfile", which will create tags without any suffix (like 'latest')
        container_image_tag_suffix: ""

      - container_image_dockerfile_location: src/app/Dockerfile-node-18-alpine
        container_image_tag_suffix: "-alpine"

      # "only" Grype finds some critical vulnerabilities
      - container_image_dockerfile_location: src/app/Dockerfile-node-18-debian-slim
        container_image_tag_suffix: "-debian-slim"

      # Dockle is complaining about "Use COPY instead of ADD"
      - container_image_dockerfile_location: src/app/Dockerfile-nodejs-16-ubi
        container_image_tag_suffix: "-ubi"

      - container_image_dockerfile_location: src/app/Dockerfile-nodejs18-distroless
        container_image_tag_suffix: "-distroless"

jobs:
  generate-matrix:
    name: "Generate matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.MATRIX }}
    steps:
      - name: ðŸ’¡ Get Dockerfiles
        id: set-matrix
        env:
          CONTAINER_IMAGE_DOCKERFILE_LOCATIONS: ${{ env.container_image_dockerfile_locations }}
        run: |
          set -euxo pipefail
          CONTAINER_IMAGE_DOCKERFILE_LOCATIONS_JSON=$(echo "${CONTAINER_IMAGE_DOCKERFILE_LOCATIONS}" | yq -o=json | jq -c)
          echo "MATRIX=${CONTAINER_IMAGE_DOCKERFILE_LOCATIONS_JSON}" | tee -a "${GITHUB_OUTPUT}"

  container-build-pipeline:
    needs: generate-matrix
    name: "ðŸ’¡ ${{ matrix.container_image_dockerfile_location }}"
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    uses: ./.github/workflows/container-build-reusable-workflow.yml
    with:
      container_image_dockerfile_location: ${{ matrix.container_image_dockerfile_location }}
      container_image_tag_suffix: ${{ matrix.container_image_tag_suffix }}
      # The following variables can not be easily taken to `env` variables, because it is not supported :-(
      container_image_destination: quay.io/petr_ruzicka/myc-hello-kubernetes
      container_image_product_id: 12345
      container_image_vendor: MyCompany
      container_image_authors: petr.ruzicka@gmail.com
      container_image_repository_url: https://quay.io/repository/petr_ruzicka/myc-hello-kubernetes?tab=tags
      container_image_expires_after: ${{ inputs.container_image_expires_after || '300' }} # days
      # https://github.com/actions/runner/issues/1483
      container_registry_push: ${{ inputs.container_registry_push == true && true || false }}
      container_image_skip_vulnerability_checks: ${{ inputs.container_image_skip_vulnerability_checks == true && true || false }}
    secrets:
      container_registry_user: ${{ secrets.CONTAINER_REGISTRY_USER }}
      container_registry_password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      # Prisma Cloud
      pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
      pcc_pass: ${{ secrets.PCC_PASS }}
      pcc_user: ${{ secrets.PCC_USER }}
      # Snyk credentials
      snyk_token: ${{ secrets.SNYK_TOKEN }}
      # Wiz credentials
      wiz_client_id: ${{ secrets.WIZ_CLIENT_ID }}
      wiz_client_secret: ${{ secrets.WIZ_CLIENT_SECRET }}
