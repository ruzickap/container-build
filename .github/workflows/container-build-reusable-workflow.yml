name: container-build-reusable-workflow

on:
  workflow_call:
    inputs:
      container_image_dockerfile_location:
        description: "Dockerfile location"
        type: string
        required: true
      container_image_destination:
        description: "Container image destination - with registry and without tags"
        type: string
        required: true
      container_image_tag_suffix:
        description: "Container image tag suffix (alpine, debian-slim, ubi-minimal)"
        type: string
        required: false
        default: ""
      container_image_product_id:
        description: "Container Image Label - Product ID"
        type: string
        required: true
      container_image_vendor:
        description: "Container Image Label - Vendor"
        type: string
        required: true
      container_image_authors:
        description: "Container Image Label - Authors"
        type: string
        required: true
      container_image_authors_name:
        description: "Container Image Label - Authors Name / Maintainers Name"
        type: string
        required: true
      container_image_logo_url:
        description: "Container Image Logo URL"
        type: string
        required: false
      container_image_platforms:
        description: "Container image platforms"
        type: string
        required: false
        default: linux/amd64,linux/arm64
      container_image_repository_url:
        description: "Container Image Label - Repository URL"
        type: string
        required: true
      container_image_expires_after:
        description: "Expires after (days) [or 'Never']"
        type: string
        required: false
        default: "Never"
      container_registry_push:
        description: "Push the image to Container Registry"
        type: boolean
        required: true
      container_image_skip_vulnerability_checks:
        description: "Skip image (vulnerability) scanner"
        type: boolean
        required: false
        default: false
      # Values: prisma, trivy, anchore, snyk, wiz
      container_image_skip_vulnerability_scanners:
        description: "Skip image (vulnerability) scanner"
        type: string
        required: false
      push_to_ghcr:
        description: "Push image to ghcr.io (GitHub)"
        type: boolean
        required: false
        default: true
    secrets:
      container_registry_user:
        description: "Username for Container Registry"
        required: true
      container_registry_password:
        description: "Password for Container Registry"
        required: true
      cosign_private_key:
        description: "Cosign Private Key"
        required: false
      cosign_private_key_password:
        description: "Password for Cosign Private Key"
        required: false
      # Prisma Cloud credentials
      pcc_console_url:
        required: false
      pcc_pass:
        required: false
      pcc_user:
        required: false
      # Snyk credentials
      snyk_token:
        required: false
      # Wiz credentials
      wiz_client_id:
        required: false
      wiz_client_secret:
        required: false

env:
  # Workaround for "testing if a secret exists" issue: https://github.com/actions/runner/issues/953, https://github.com/orgs/community/discussions/26726
  PCC_CONSOLE_URL: ${{ secrets.pcc_console_url }}
  PCC_PASS: ${{ secrets.pcc_pass }}
  PCC_USER: ${{ secrets.pcc_user }}
  SNYK_TOKEN: ${{ secrets.snyk_token }}
  WIZ_CLIENT_ID: ${{ secrets.wiz_client_id }}
  WIZ_CLIENT_SECRET: ${{ secrets.wiz_client_secret }}
  COSIGN_PRIVATE_KEY: ${{ secrets.cosign_private_key }}
  COSIGN_PRIVATE_KEY_PASSWORD: ${{ secrets.cosign_private_key_password }}

permissions:
  actions: read
  contents: write
  id-token: write
  packages: write

jobs:
  temporary-container-build:
    runs-on: ubuntu-latest
    outputs:
      container_image_temporary_metadata: ${{ steps.build-push-action-temporary-container-registry.outputs.metadata }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Check if the tag exists in registry
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          set -euxo pipefail
          CONTAINER_IMAGE_TAG=$(echo "${{ github.ref_name }}${{ inputs.container_image_tag_suffix }}" | sed 's/^v//')
          # Check if the tag exists in registry - if yes - skip build
          if docker manifest inspect "${{ inputs.container_image_destination }}:${CONTAINER_IMAGE_TAG}" ; then
            echo "*** Container tag \"${{ inputs.container_image_destination }}:${CONTAINER_IMAGE_TAG}\" already exists !!!"
            exit 1
          else
            echo "*** Container tag \"${{ inputs.container_image_destination }}:${CONTAINER_IMAGE_TAG}\" doesn't exist..."
          fi

      - name: Set GitHub variable - container_image_docker_build_directory
        id: container_image_docker_build_directory
        run: |
          set -euxo pipefail
          echo "CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY=$(dirname "${{ inputs.container_image_dockerfile_location }}")" | tee -a "${GITHUB_OUTPUT}"

      - name: Build temporary container image
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        id: build-push-action-temporary-container-registry
        with:
          file: ${{ inputs.container_image_dockerfile_location }}
          context: ${{ steps.container_image_docker_build_directory.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          load: true
          tags: temporary_container-${{ github.run_id }}:latest

      #########################
      # Trivy Scanner
      #########################

      - name: Trivy - scan container image
        uses: aquasecurity/trivy-action@master
        if: ${{ always() && steps.build-push-action-temporary-container-registry.outcome == 'success' && ! contains(inputs.container_image_skip_vulnerability_scanners, 'trivy') }}
        continue-on-error: ${{ inputs.container_image_skip_vulnerability_checks || false }}
        with:
          image-ref: temporary_container-${{ github.run_id }}:latest
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL

      #########################
      # Anchore - Grype
      #########################

      - name: Grype - scan container image
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a # v3.6.4
        # Continue whenever container was built (no matter if previous scanner failed)
        if: ${{ always() && steps.build-push-action-temporary-container-registry.outcome == 'success' && ! contains(inputs.container_image_skip_vulnerability_scanners, 'grype')}}
        continue-on-error: ${{ inputs.container_image_skip_vulnerability_checks || false }}
        with:
          image: temporary_container-${{ github.run_id }}:latest
          severity-cutoff: critical
          output-format: table

      #########################
      # Snyk Scanner
      #########################

      - name: Snyk - scan container image
        uses: snyk/actions/docker@master
        if: ${{ always() && steps.build-push-action-temporary-container-registry.outcome == 'success' && env.SNYK_TOKEN != '' && ! contains(inputs.container_image_skip_vulnerability_scanners, 'snyk') }}
        continue-on-error: ${{ inputs.container_image_skip_vulnerability_checks || false }}
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          image: temporary_container-${{ github.run_id }}:latest
          args: --file=${{ inputs.container_image_dockerfile_location }} --severity-threshold=critical

      #########################
      # Prisma Cloud Scanner
      #########################

      - name: Prisma Cloud - scan container image
        uses: PaloAltoNetworks/prisma-cloud-scan@124b48d8325c23f58a35da0f1b4d9a6b54301d05 # v1.6.7
        if: ${{ always() && steps.build-push-action-temporary-container-registry.outcome == 'success' && env.PCC_CONSOLE_URL != '' && env.PCC_PASS != '' && env.PCC_USER != '' && ! contains(inputs.container_image_skip_vulnerability_scanners, 'prisma') }}
        continue-on-error: ${{ inputs.container_image_skip_vulnerability_checks || false }}
        with:
          pcc_console_url: ${{ env.PCC_CONSOLE_URL }}
          pcc_user: ${{ env.PCC_USER }}
          pcc_pass: ${{ env.PCC_PASS }}
          image_name: temporary_container-${{ github.run_id }}:latest

      #########################
      # Wiz Scanner
      #########################

      - name: Wiz - scan container image
        if: ${{ always() && steps.build-push-action-temporary-container-registry.outcome == 'success' && env.WIZ_CLIENT_ID != '' && env.WIZ_CLIENT_SECRET != '' && ! contains(inputs.container_image_skip_vulnerability_scanners, 'wiz') }}
        continue-on-error: ${{ inputs.container_image_skip_vulnerability_checks || false }}
        env:
          WIZ_CLIENT_ID: ${{ env.WIZ_CLIENT_ID }}
          WIZ_CLIENT_SECRET: ${{ env.WIZ_CLIENT_SECRET }}
          CONTAINER_IMAGE_DESTINATION: ${{ inputs.container_image_destination }}
        run: |
          set -euxo pipefail
          curl -s -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli
          ./wizcli auth --id "${WIZ_CLIENT_ID}" --secret "${WIZ_CLIENT_SECRET}"
          ./wizcli docker scan --image "temporary_container-${{ github.run_id }}:latest" --tag product_id="${{ inputs.container_image_product_id }}"

  container-build:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.container_registry_push || github.event_name == 'schedule' }}
    needs: temporary-container-build
    outputs:
      container_image_digest: ${{ steps.build-push-action-container-registry.outputs.digest }}
      container_image_name: ${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set GitHub variables
        id: variables
        env:
          CONTAINER_IMAGE_DOCKERFILE_LOCATION: ${{ inputs.container_image_dockerfile_location }}
          CONTAINER_IMAGE_DESTINATION: ${{ inputs.container_image_destination }}
          CONTAINER_IMAGE_EXPIRES_AFTER: ${{ inputs.container_image_expires_after }}
        run: |
          set -euxo pipefail
          echo "${CONTAINER_IMAGE_DESTINATION}" | awk -F / '{print "CONTAINER_REGISTRY="$1}' | tee -a "${GITHUB_OUTPUT}"
          echo "CONTAINER_IMAGE_NAME=$(basename "${CONTAINER_IMAGE_DESTINATION}")" | tee -a "${GITHUB_OUTPUT}"
          echo "CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY=$(dirname "${{ inputs.container_image_dockerfile_location }}")" | tee -a "${GITHUB_OUTPUT}"
          # Get details about baqse image form the temporarily built container
          echo '${{ needs.temporary-container-build.outputs.container_image_temporary_metadata }}' | jq -r '."containerimage.buildinfo".sources[-1].ref | "CONTAINER_IMAGE_BASE_IMAGE=\(.)"' | tee -a "${GITHUB_OUTPUT}"
          echo '${{ needs.temporary-container-build.outputs.container_image_temporary_metadata }}' | jq -r '."containerimage.buildinfo".sources[-1].pin | "CONTAINER_IMAGE_BASE_IMAGE_DIGEST=\(.)"' | tee -a "${GITHUB_OUTPUT}"
          echo '${{ toJSON(github.event.repository.topics) }}' | jq -r '. | join(",") | "GITHUB_REPOSITORY_TOPICS=\(.)"' | tee -a "${GITHUB_OUTPUT}"
          # Set variables for com.mycompany.image.expires.after and com.mycompany.image.expires
          if [[ "${CONTAINER_IMAGE_EXPIRES_AFTER}" = "Never" ]]; then
            echo "CONTAINER_IMAGE_EXPIRES=Never" | tee -a "${GITHUB_OUTPUT}"
            echo "CONTAINER_IMAGE_EXPIRES_AFTER=Never" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "CONTAINER_IMAGE_EXPIRES=$(date -u --date="+${CONTAINER_IMAGE_EXPIRES_AFTER} days" +'%FT%TZ')" | tee -a "${GITHUB_OUTPUT}"
            echo "CONTAINER_IMAGE_EXPIRES_AFTER=${CONTAINER_IMAGE_EXPIRES_AFTER}d" | tee -a "${GITHUB_OUTPUT}"
          fi

      - name: Login to container registry - ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ${{ steps.variables.outputs.CONTAINER_REGISTRY }}
          username: ${{ secrets.container_registry_user }}
          password: ${{ secrets.container_registry_password }}

      - name: Login to container registry - ghcr.io
        if: ${{ inputs.push_to_ghcr }}
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Docker meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        id: docker_meta
        with:
          images: |
            name=${{ inputs.container_image_destination }}
            name=ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }},enable=${{ inputs.push_to_ghcr }}
          flavor: |
            suffix=${{ inputs.container_image_tag_suffix }},onlatest=true
          tags: |
            # Whever the pipeline runs form "main" - use "latest" container tag
            type=raw,value=latest,enable={{is_default_branch}}
            # When the pipeline is not excuted form 'main' branch use "br-<mybranch>" tag
            type=ref,prefix=br-,event=branch,enable=${{ github.ref_name != github.event.repository.default_branch }}
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=semver,pattern={{major}},event=tag,enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          labels: |
            # org.opencontainers.image.created - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)
            # org.opencontainers.image.licenses - it is there by default
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.version - it is there by default
            org.opencontainers.image.authors=${{ inputs.container_image_authors }}
            org.opencontainers.image.base.digest=${{ steps.variables.outputs.CONTAINER_IMAGE_BASE_IMAGE_DIGEST }}
            org.opencontainers.image.base.name=${{ steps.variables.outputs.CONTAINER_IMAGE_BASE_IMAGE }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.vendor=${{ inputs.container_image_vendor }}
            io.artifacthub.package.keywords=${{ steps.variables.outputs.GITHUB_REPOSITORY_TOPICS }}
            io.artifacthub.package.license=${{ github.event.repository.license.spdx_id }}
            io.artifacthub.package.logo-url=${{ inputs.container_image_logo_url || 'https://raw.githubusercontent.com/kubernetes/community/487f994c013ea61d92cf9a341af7620037abbce3/icons/svg/resources/unlabeled/pod.svg' }}
            io.artifacthub.package.maintainers=[{"name":"${{ inputs.container_image_authors_name }}","email":"${{ inputs.container_image_authors }}"}]
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/README.md
            com.mycompany.image.expires.after=${{ steps.variables.outputs.CONTAINER_IMAGE_EXPIRES_AFTER }}
            com.mycompany.image.expires=${{ steps.variables.outputs.CONTAINER_IMAGE_EXPIRES }}
            com.mycompany.image.pipeline.source=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}/workflow
            com.mycompany.image.pipeline.url=${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
            com.mycompany.image.product_id=${{ inputs.container_image_product_id }}
            com.mycompany.image.repository.url=${{ inputs.container_image_repository_url }}
            com.mycompany.image.used_for=all
            quay.expires-after=${{ steps.variables.outputs.CONTAINER_IMAGE_EXPIRES_AFTER }}

      - name: Docker build and push
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        id: build-push-action-container-registry
        with:
          file: ${{ inputs.container_image_dockerfile_location }}
          context: ${{ steps.variables.outputs.CONTAINER_IMAGE_DOCKER_BUILD_DIRECTORY }}
          push: true
          platforms: ${{ inputs.container_image_platforms }}
          provenance: false
          sbom: false
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 # v3.5.0

      - name: Sign the images with GitHub OIDC Token
        run: |
          set -euxo pipefail
          echo "${{ steps.docker_meta.outputs.tags }}" | xargs --verbose -I {} cosign sign --yes {}@${{ steps.build-push-action-container-registry.outputs.digest }}

      #########################
      # SBOM
      #########################

      - name: Trivy - create SBOM - ${{ inputs.container_image_destination }}:${{ steps.docker_meta.outputs.version }}
        uses: aquasecurity/trivy-action@master
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          image-ref: ${{ inputs.container_image_destination }}:${{ steps.docker_meta.outputs.version }}
          scan-type: image
          format: cyclonedx
          output: ${{ steps.variables.outputs.CONTAINER_REGISTRY }}-${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}-${{ steps.docker_meta.outputs.version }}-bom.cdx.json

      - name: Attach SBOM - ${{ inputs.container_image_destination }}:${{ steps.docker_meta.outputs.version }}
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          set -euxo pipefail
          cosign attest --yes --predicate "${{ steps.variables.outputs.CONTAINER_REGISTRY }}-${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}-${{ steps.docker_meta.outputs.version }}-bom.cdx.json" --type cyclonedx "${{ inputs.container_image_destination }}@${CONTAINER_IMAGE_DIGEST_TAG}"
        env:
          CONTAINER_IMAGE_DIGEST_TAG: ${{ steps.build-push-action-container-registry.outputs.digest }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trivy - create SBOM - ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        uses: aquasecurity/trivy-action@master
        if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.push_to_ghcr }}
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
          scan-type: image
          format: cyclonedx
          output: ${{ steps.variables.outputs.CONTAINER_REGISTRY }}-${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}-${{ steps.docker_meta.outputs.version }}-bom.cdx.json

      - name: Attach SBOM - ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.push_to_ghcr }}
        run: |
          set -euxo pipefail
          cosign attest --yes --predicate "${{ steps.variables.outputs.CONTAINER_REGISTRY }}-${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}-${{ steps.docker_meta.outputs.version }}-bom.cdx.json" --type cyclonedx "ghcr.io/${{ github.repository_owner }}/${{ steps.variables.outputs.CONTAINER_IMAGE_NAME }}@${CONTAINER_IMAGE_DIGEST_TAG}"
        env:
          CONTAINER_IMAGE_DIGEST_TAG: ${{ steps.build-push-action-container-registry.outputs.digest }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #########################
  # SLSA
  #########################

  provenance-ghcr-io:
    if: ${{ startsWith(github.ref, 'refs/tags/') && inputs.push_to_ghcr }}
    needs:
      - container-build
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0-rc.0
    with:
      image: ghcr.io/${{ github.repository_owner }}/${{ needs.container-build.outputs.container_image_name }}
      digest: ${{ needs.container-build.outputs.container_image_digest }}
    secrets:
      registry-password: "${{ secrets.GITHUB_TOKEN }}"
      registry-username: "${{ github.actor }}"

  provenance-container-registry:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
      - container-build
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0-rc.0
    with:
      image: ${{ inputs.container_image_destination }}
      digest: ${{ needs.container-build.outputs.container_image_digest }}
    secrets:
      registry-password: "${{ secrets.container_registry_password }}"
      registry-username: "${{ secrets.container_registry_user }}"
